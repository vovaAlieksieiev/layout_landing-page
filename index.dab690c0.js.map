{"mappings":"ACEA,IAAM,EAAS,SAAS,aAAa,CAAC,WAChC,EAAS,EAAO,aAAa,CAAC,WAC9B,EAAU,EAAO,aAAa,CAAC,QAC/B,EAAW,EAAQ,gBAAgB,CAAC,cACpC,EAAa,EAAO,aAAa,CAAC,oBAExC,SAAS,EAAY,CAAa,CAAC,CAAO,CAAC,CAAS,CAAC,CAAM,EACzD,EAAc,SAAS,CAAC,MAAM,CAAC,kBAC/B,EAAQ,SAAS,CAAC,MAAM,CAAC,eACzB,EAAU,SAAS,CAAC,MAAM,CAAC,2BAC3B,EAAO,SAAS,CAAC,MAAM,CAAC,kBAEpB,EAAQ,SAAS,CAAC,QAAQ,CAAC,eAC7B,SAAS,IAAI,CAAC,KAAK,CAAC,QAAQ,CAAG,SAC5B,SAAS,IAAI,CAAC,KAAK,CAAC,QAAQ,CAAG,EACtC,CA4CA,SAAS,gBAAgB,CAAC,mBAAoB,eArBrB,EACjB,EAQA,EATiB,EAsBP,kBArBV,EAAW,SAAS,gBAAgB,CAAE,IAAa,MAAA,CAAV,IAQzC,EAAW,IAAI,qBAAqB,SAAC,CAAA,CAAS,CAApD,EACE,EAAQ,OAAO,CAAC,SAAA,CAAhB,EACE,EAAM,cAAc,CAAG,EAAM,MAAM,CAAC,SAAS,CAAC,GAAG,CAAC,GAAa,MAAA,CAAV,EAAU,aAAa,EAAM,MAAM,CAAC,SAAS,CAAC,MAAM,CAAC,GAAa,MAAA,CAAV,EAAU,YACzH,EACF,EAVgB,CACd,KAAM,KACN,WAAY,MACZ,UAAW,EACb,GAQA,EAAS,OAAO,CAAC,SAAA,CAAjB,EACE,EAAS,OAAO,CAAC,EACnB,GAvBA,OAAO,gBAAgB,CAAC,SAAU,WAChC,OAAO,OAAO,CAAG,GAAK,AA4BX,EA5BkB,SAAS,CAAC,GAAG,CAAC,kBAAoB,AA4BpD,EA5B2D,SAAS,CAAC,MAAM,CAAC,iBACzF,GA4BA,AA7CF,SAA0B,CAAa,CAAE,CAAU,CAAE,CAAS,CAAE,CAAM,EACpE,EAAc,gBAAgB,CAAC,QAAS,WACtC,EAAY,EAAc,EAAW,EAAU,EACjD,EACF,EAyCmB,EAAQ,EAAS,EAAY,GAC9C,AAxCF,SAA8B,CAAQ,CAAE,CAAO,CAAE,CAAM,CAAE,CAAa,CAAE,CAAS,EAC1E,IAAA,EAAA,CAAA,EAAA,EAAA,CAAA,EAAA,EAAA,KAAA,E,G,CAAL,IAAA,IAAK,EAAA,EAAY,CAAA,CAAA,OAAA,QAAA,CAAA,GAAZ,CAAA,CAAA,EAAA,AAAA,CAAA,EAAA,EAAA,IAAA,EAAA,EAAA,IAAA,AAAA,EAAA,EAAL,CAAA,EACE,AADG,EAAA,KAAA,CACE,gBAAgB,CAAC,QAAS,WAC7B,EAAY,EAAc,EAAQ,EAAU,EAC9C,E,C,M,E,CAHG,EAAA,CAAA,EAAA,EAAA,C,Q,C,G,CAAA,GAAA,AAAA,MAAA,EAAA,MAAA,EAAA,EAAA,MAAA,E,Q,CAAA,GAAA,EAAA,MAAA,C,C,CAKP,EAkCuB,EAAU,EAAS,EAAQ,EAAQ,EAC1D","sources":["<anon>","src/scripts/main.js"],"sourcesContent":["\"use strict\";\nvar header = document.querySelector(\".header\");\nvar burger = header.querySelector(\".burger\");\nvar navMenu = header.querySelector(\".nav\");\nvar navLinks = navMenu.querySelectorAll(\".nav__link\");\nvar phoneBlock = header.querySelector(\".header__contact\");\nfunction menuToggler(burgerElement, navMenu, phoneIcon, header) {\n    burgerElement.classList.toggle(\"burger--active\");\n    navMenu.classList.toggle(\"nav--active\");\n    phoneIcon.classList.toggle(\"header__contact--active\");\n    header.classList.toggle(\"header--active\");\n    if (navMenu.classList.contains(\"nav--active\")) document.body.style.overflow = \"hidden\";\n    else document.body.style.overflow = \"\";\n}\nfunction burgerMenuAction(burgerElement, navElement, phoneIcon, header) {\n    burgerElement.addEventListener(\"click\", function() {\n        menuToggler(burgerElement, navElement, phoneIcon, header);\n    });\n}\nfunction closeMenuOnLinkClick(navLinks, navMenu, header, burgerElement, phoneIcon) {\n    var _iteratorNormalCompletion = true, _didIteratorError = false, _iteratorError = undefined;\n    try {\n        for(var _iterator = navLinks[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true){\n            var item = _step.value;\n            item.addEventListener(\"click\", function() {\n                menuToggler(burgerElement, navMenu, phoneIcon, header);\n            });\n        }\n    } catch (err) {\n        _didIteratorError = true;\n        _iteratorError = err;\n    } finally{\n        try {\n            if (!_iteratorNormalCompletion && _iterator.return != null) {\n                _iterator.return();\n            }\n        } finally{\n            if (_didIteratorError) {\n                throw _iteratorError;\n            }\n        }\n    }\n}\nfunction headerScroll(header) {\n    window.addEventListener(\"scroll\", function() {\n        window.scrollY > 50 ? header.classList.add(\"header--scroll\") : header.classList.remove(\"header--scroll\");\n    });\n}\nfunction observeElements(elementId) {\n    var elements = document.querySelectorAll(\".\".concat(elementId));\n    var options = {\n        root: null,\n        rootMargin: \"0px\",\n        threshold: 0.1\n    };\n    var observer = new IntersectionObserver(function(entries, observer) {\n        entries.forEach(function(entry) {\n            entry.isIntersecting ? entry.target.classList.add(\"\".concat(elementId, \"--active\")) : entry.target.classList.remove(\"\".concat(elementId, \"--active\"));\n        });\n    }, options);\n    elements.forEach(function(item) {\n        observer.observe(item);\n    });\n}\ndocument.addEventListener(\"DOMContentLoaded\", function() {\n    observeElements(\"observe-element\");\n    headerScroll(header);\n    burgerMenuAction(burger, navMenu, phoneBlock, header);\n    closeMenuOnLinkClick(navLinks, navMenu, header, burger, phoneBlock);\n});\n\n//# sourceMappingURL=index.dab690c0.js.map\n","'use strict';\n\nconst header = document.querySelector('.header');\nconst burger = header.querySelector('.burger');\nconst navMenu = header.querySelector('.nav');\nconst navLinks = navMenu.querySelectorAll('.nav__link');\nconst phoneBlock = header.querySelector('.header__contact');\n\nfunction menuToggler(burgerElement,navMenu,phoneIcon,header) {\n  burgerElement.classList.toggle('burger--active')\n  navMenu.classList.toggle('nav--active')\n  phoneIcon.classList.toggle('header__contact--active')\n  header.classList.toggle('header--active')\n\n  if (navMenu.classList.contains('nav--active'))\n    document.body.style.overflow = 'hidden';\n  else document.body.style.overflow = '';\n}\n\nfunction burgerMenuAction(burgerElement, navElement, phoneIcon, header) {\n  burgerElement.addEventListener('click', () => {\n    menuToggler(burgerElement,navElement,phoneIcon,header)\n  });\n}\n\nfunction closeMenuOnLinkClick(navLinks, navMenu, header, burgerElement, phoneIcon) {\n  for (let item of navLinks) {\n    item.addEventListener('click', () => {\n      menuToggler(burgerElement,navMenu,phoneIcon,header)\n    });\n  }\n}\n\nfunction headerScroll(header) {\n  window.addEventListener('scroll', () => {\n    window.scrollY > 50 ? header.classList.add('header--scroll') : header.classList.remove('header--scroll');\n  });\n}\n\n\nfunction observeElements(elementId) {\n  const elements = document.querySelectorAll(`.${elementId}`);\n\n  const options = {\n    root: null,\n    rootMargin: '0px',\n    threshold: 0.1,\n  };\n\n  const observer = new IntersectionObserver((entries, observer) => {\n    entries.forEach(entry => {\n      entry.isIntersecting ? entry.target.classList.add(`${elementId}--active`) : entry.target.classList.remove(`${elementId}--active`);\n    });\n  }, options);\n\n  elements.forEach(item => {\n    observer.observe(item);\n  });\n}\n\n\ndocument.addEventListener('DOMContentLoaded', () => {\n  observeElements('observe-element');\n  headerScroll(header);\n  burgerMenuAction(burger, navMenu, phoneBlock, header);\n  closeMenuOnLinkClick(navLinks, navMenu, header, burger, phoneBlock);\n});\n"],"names":["header","document","querySelector","burger","navMenu","navLinks","querySelectorAll","phoneBlock","menuToggler","burgerElement","phoneIcon","classList","toggle","contains","body","style","overflow","addEventListener","elementId","elements","observer","concat","IntersectionObserver","entries","forEach","entry","isIntersecting","target","add","remove","root","rootMargin","threshold","item","observe","window","scrollY","burgerMenuAction","navElement","closeMenuOnLinkClick","_iteratorNormalCompletion","_didIteratorError","_iteratorError","undefined","_step","_iterator","Symbol","iterator","next","done","value","err","return"],"version":3,"file":"index.dab690c0.js.map"}